(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{126:function(e,t,a){"use strict";a.d(t,"b",(function(){return c})),a.d(t,"a",(function(){return i}));var n=a(22),r=a(127);function c(){var e=Object(n.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,a=void 0===t?"/":t,c=e.url;return{withBaseUrl:function(e,t){return function(e,t,a,n){var c=void 0===n?{}:n,i=c.forcePrependBaseUrl,o=void 0!==i&&i,l=c.absolute,s=void 0!==l&&l;if(!a)return a;if(a.startsWith("#"))return a;if(Object(r.b)(a))return a;if(o)return t+a;var b=a.startsWith(t)?a:t+a.replace(/^\//,"");return s?e+b:b}(c,a,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,c().withBaseUrl)(e,t)}},127:function(e,t,a){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!n(e)}a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return r}))},130:function(e,t,a){"use strict";var n=a(3),r=a(138),c=a.n(r),i=a(139),o=a(8),l=a(0),s=a.n(l),b=a(145),p=a(144),d={};t.a=function(e){var t=e.fontfile,a=void 0===t?"https://font.tomchen.org/bdfparser_fonts/unifont-reduced.bdf":t,r=e.pixelcolors,u=e.size,f=void 0===u?2:u,m=e.func,j=void 0===m?function(){}:m,h=Object(o.a)(e,["fontfile","pixelcolors","size","func"]),O=Object(l.useRef)(null);return Object(l.useEffect)(Object(i.a)(c.a.mark((function e(){var t,n,o,l;return c.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return void 0===d[a]&&(d[a]=new Promise((function(e,t){Object(i.a)(c.a.mark((function n(){return c.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.t0=e,n.next=4,(new b.e).load_filelines(Object(p.a)(a));case 4:n.t1=n.sent,(0,n.t0)(n.t1),n.next=11;break;case 8:n.prev=8,n.t2=n.catch(0),t(new Error("Cannot load font file."));case 11:case"end":return n.stop()}}),n,null,[[0,8]])})))()}))),e.prev=1,e.next=4,d[a];case 4:t=e.sent,(n=j(t,{Font:b.e,Glyph:b.f,Bitmap:b.d,$Font:b.b,$Glyph:b.c,$Bitmap:b.a}))&&(o=O.current)&&(o.style.width="100%",o.style.height=(n.height()*f).toString()+"px",o.width=o.offsetWidth/f,o.height=o.offsetHeight/f,l=o.getContext("2d"),n.draw2canvas(l,r)),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(1),console.log(e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])}))),[]),s.a.createElement("canvas",Object(n.a)({ref:O},h))}},131:function(e,t,a){"use strict";a.d(t,"a",(function(){return i}));var n=a(0),r=a.n(n),c=a(126);function i(e){var t=e.src,a=e.caption,n=e.figure_number,i=e.width,o=e.imgUrl,l=e.link,s=e.position;return r.a.createElement("div",{style:{display:"flow-root"}},r.a.createElement("figure",{style:{float:"left"===s||"right"===s?s:"none",textAlign:"center",margin:"1em"}},l?r.a.createElement("a",{href:l},r.a.createElement("img",{alt:a,src:o?Object(c.a)("img/"+t):t,width:i})):r.a.createElement("img",{alt:a,src:o?Object(c.a)("img/"+t):t,width:i}),r.a.createElement("figcaption",{style:{fontStyle:"italic"}},n&&r.a.createElement("strong",null,"Figure ",n," "),a)))}},136:function(e,t,a){"use strict";var n=a(0),r=a.n(n),c=a(133),i=a(124),o=a(55),l=a.n(o),s=37,b=39;t.a=function(e){var t=e.lazy,a=e.block,o=e.defaultValue,p=e.values,d=e.groupId,u=e.className,f=Object(c.a)(),m=f.tabGroupChoices,j=f.setTabGroupChoices,h=Object(n.useState)(o),O=h[0],g=h[1],v=n.Children.toArray(e.children);if(null!=d){var y=m[d];null!=y&&y!==O&&p.some((function(e){return e.value===y}))&&g(y)}var w=function(e){g(e),null!=d&&j(d,e)},x=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":a},u)},p.map((function(e){var t=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===t,className:Object(i.a)("tabs__item",l.a.tabItem,{"tabs__item--active":O===t}),key:t,ref:function(e){return x.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case b:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case s:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(x,e.target,e)},onFocus:function(){return w(t)},onClick:function(){w(t)}},a)}))),t?Object(n.cloneElement)(v.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}},137:function(e,t,a){"use strict";var n=a(3),r=a(0),c=a.n(r);t.a=function(e){var t=e.children,a=e.hidden,r=e.className;return c.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:a,className:r}),t)}},93:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return p})),a.d(t,"metadata",(function(){return d})),a.d(t,"toc",(function(){return u})),a.d(t,"default",(function(){return m}));var n=a(3),r=a(8),c=(a(0),a(123)),i=a(136),o=a(137),l=a(126),s=a(131),b=a(130),p={id:"index",title:"BDF Parser (TypeScript / JavaScript library)",sidebar_label:"BDF Parser (TS/JS) - Overview",slug:"/"},d={unversionedId:"index",id:"index",isDocsHomePage:!1,title:"BDF Parser (TypeScript / JavaScript library)",description:"Introduction",source:"@site/bdfparser_js/index.mdx",slug:"/",permalink:"/bdfparser_js/",editUrl:"https://github.com/tomchen/font-website/edit/main/bdfparser_js/index.mdx",version:"current",sidebar_label:"BDF Parser (TS/JS) - Overview",sidebar:"sidebar",next:{title:"BDF Parser Live Code Editor",permalink:"/bdfparser_js/editor"}},u=[{value:"Introduction",id:"introduction",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Quick examples",id:"quick-examples",children:[]},{value:"Copyright &amp; links",id:"copyright--links",children:[]}],f={toc:u};function m(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},f,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"introduction"},"Introduction"),Object(c.b)("p",null,"This is a BDF (Glyph Bitmap Distribution; ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Glyph_Bitmap_Distribution_Format"}),"Wikipedia"),"; ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"../bdf_spec/"}),"Spec"),") format bitmap font file parser library in TypeScript (JavaScript). It has ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"font"}),Object(c.b)("inlineCode",{parentName:"a"},"Font")),", ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"glyph"}),Object(c.b)("inlineCode",{parentName:"a"},"Glyph"))," and ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"bitmap"}),Object(c.b)("inlineCode",{parentName:"a"},"Bitmap"))," classes providing more than 30 chainable API methods of parsing BDF fonts, getting their meta information, rendering text in any writing direction, adding special effects and manipulating bitmap images. 0 dependency and tested in Node.js, browsers (so you can use HTML Canvas) and Deno, it has detailed documentation / tutorials / API reference."),Object(c.b)("p",null,"You can even try the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"editor"}),Object(c.b)("strong",{parentName:"a"},"Live Demo & Code Editor")),"!"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"BDF Parser TypeScript (JavaScript) library")," (",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"../bdfparser_js/"}),"documentation"),"; ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/tomchen/bdfparser-js"}),"GitHub page"),"; ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/bdfparser"}),"npm page"),"; ",Object(c.b)("inlineCode",{parentName:"p"},"npm i bdfparser"),") is a port of ",Object(c.b)("strong",{parentName:"p"},"BDF Parser Python library")," (",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"../bdfparser_py/"}),"documentation"),"; ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/tomchen/bdfparser"}),"GitHub page"),"; ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://pypi.org/project/bdfparser/"}),"PyPI page"),"; ",Object(c.b)("inlineCode",{parentName:"p"},"pip install bdfparser"),"). Both are written by ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/tomchen/"}),"Tom Chen")," and under the MIT License."),Object(c.b)("h2",{id:"installation"},"Installation"),Object(c.b)(i.a,{defaultValue:"npm",groupId:"npm2yarn",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},Object(c.b)(o.a,{value:"npm",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install bdfparser readlineiter\n"))),Object(c.b)(o.a,{value:"yarn",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"yarn add bdfparser readlineiter\n")))),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"readlineiter")," is used for Node.js to read local file. You can instead use ",Object(c.b)("inlineCode",{parentName:"p"},"fetchline")," for browsers/Deno to fetch remote file. See ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/tomchen/fetchline"}),"Fetch Line JavaScript packages"),"."),Object(c.b)("h2",{id:"quick-examples"},"Quick examples"),Object(c.b)(i.a,{groupId:"bdfparser-js-ts-py",defaultValue:"js",values:[{label:"JavaScript (CJS)",value:"js"},{label:"TypeScript (strict)",value:"ts"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(c.b)(o.a,{value:"js",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const { $Font } = require('bdfparser')\n\nconst getline = require('readlineiter')\n\n\n;(async () => {\n\n    const font = await $Font(getline('./test/fonts/unifont-13.0.04.bdf'))\n\n    console.log(`This font's global size is \\\n${font.headers.fbbx} x ${font.headers.fbby} (pixel), \\\nit contains ${font.length} glyphs.`)\n\n})()\n\n\n// This font's global size is 16 x 16 (pixel), it contains 57086 glyphs.\n"))),Object(c.b)(o.a,{value:"ts",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { $Font } from 'bdfparser'\nimport getline from 'readlineiter'\n\n;(async () => {\n  try {\n    const font = await $Font(getline('./test/fonts/unifont-13.0.04.bdf'))\n    if (!font || !font.headers) {\n      throw new Error('Unable to load font')\n    }\n    console.log(`This font's global size is \\\n${font.headers.fbbx} x ${font.headers.fbby} (pixel), \\\nit contains ${font.length} glyphs.`)\n  } catch (error) {\n    throw error\n  }\n})()\n// This font's global size is 16 x 16 (pixel), it contains 57086 glyphs.\n"))),Object(c.b)(o.a,{value:"py",mdxType:"TabItem"},Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"Python code is included here only for comparison. See ",Object(c.b)("a",Object(n.a)({parentName:"em"},{href:"../bdfparser_py/#quick-examples"}),"Python library's documentation")," for details")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"from bdfparser import Font\n\nfont = Font('tests/fonts/unifont-13.0.04.bdf')\nprint(f\"This font's global size is \"\n      f\"{font.headers['fbbx']} x {font.headers['fbby']} (pixel), \"\n      f\"it contains {len(font)} glyphs.\")\n# This font's global size is 16 x 16 (pixel), it contains 57086 glyphs.\n")))),Object(c.b)("p",null,'Print cropped and combined "a" and "c" with shadow effect:'),Object(c.b)(i.a,{groupId:"bdfparser-js-ts-py",defaultValue:"js",values:[{label:"JavaScript (CJS)",value:"js"},{label:"TypeScript (strict)",value:"ts"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(c.b)(o.a,{value:"js",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const a = font.glyph('a')\nconst c = font.glyph('c')\n\nconst ac = a\n  .draw()\n  .crop(6, 8, 1, 2)\n  .concat(c.draw().crop(6, 8, 1, 2))\n  .shadow()\n\nconsole.log(ac.toString())\n// .####..####..\n// #.&&&##.&&&#.\n// .&...##&....&\n// .######&.....\n// #.&&&##&.....\n// #&...##&.....\n// #&..###&...#.\n// .###.#&####.&\n// ..&&&.&.&&&&.\n"))),Object(c.b)(o.a,{value:"ts",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const a = font.glyph('a')\nconst c = font.glyph('c')\nif (a && c) {\n  const ac = a\n    .draw()\n    .crop(6, 8, 1, 2)\n    .concat(c.draw().crop(6, 8, 1, 2))\n    .shadow()\n  console.log(ac.toString())\n}\n// .####..####..\n// #.&&&##.&&&#.\n// .&...##&....&\n// .######&.....\n// #.&&&##&.....\n// #&...##&.....\n// #&..###&...#.\n// .###.#&####.&\n// ..&&&.&.&&&&.\n"))),Object(c.b)(o.a,{value:"py",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'ac = font.glyph("a").draw().crop(6, 8, 1, 2).concat(\n    font.glyph("c").draw().crop(6, 8, 1, 2)\n    ).shadow()\nprint(ac)\n# .####..####..\n# #.&&&##.&&&#.\n# .&...##&....&\n# .######&.....\n# #.&&&##&.....\n# #&...##&.....\n# #&..###&...#.\n# .###.#&####.&\n# ..&&&.&.&&&&.\n')))),Object(c.b)("p",null,'Get an enlarged version (8 times both width and height) of this "ac", and render it in HTML ',Object(c.b)("inlineCode",{parentName:"p"},"<canvas>")," in browser with JavaScript / TypeScript ",Object(c.b)("small",null,"(or with PIL (Pillow) library in Python)"),":"),Object(c.b)(i.a,{groupId:"bdfparser-js-ts-py",defaultValue:"js",values:[{label:"JavaScript (CJS)",value:"js"},{label:"TypeScript (strict)",value:"ts"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(c.b)(o.a,{value:"js",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const ac_8x8 = ac.enlarge(8, 8)\nconst ctx = canvas.getContext('2d')\nac_8x8.draw2canvas(ctx)\n"))),Object(c.b)(o.a,{value:"ts",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const ac_8x8 = ac.enlarge(8, 8)\nconst ctx = canvas.getContext('2d')\nac_8x8.draw2canvas(ctx)\n"))),Object(c.b)(o.a,{value:"py",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"ac_8x8 = ac * 8\nfrom PIL import Image\nim_ac = Image.frombytes('RGBA',\n                        (ac_8x8.width(), ac_8x8.height()),\n                        ac_8x8.tobytes('RGBA'))\nim_ac.save(\"ac.png\", \"PNG\")\n")))),Object(c.b)(b.a,{size:1,func:function(e){return e.glyph("a").draw().crop(6,8,1,2).concat(e.glyph("c").draw().crop(6,8,1,2)).shadow().enlarge(8,8)},mdxType:"BDF"}),Object(c.b)("p",null,'Get text "Hello!", from right to left, with glowing effect:'),Object(c.b)(i.a,{groupId:"bdfparser-js-ts-py",defaultValue:"js",values:[{label:"JavaScript (CJS)",value:"js"},{label:"TypeScript (strict)",value:"ts"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(c.b)(o.a,{value:"js",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const hello = font.draw('Hello!', {direction: 'rl'}).glow()\nhello.draw2canvas(canvas.getContext('2d'))\n"))),Object(c.b)(o.a,{value:"ts",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const hello = font.draw('Hello!', {direction: 'rl'}).glow()\nhello.draw2canvas(canvas.getContext('2d'))\n"))),Object(c.b)(o.a,{value:"py",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"hello = font.draw('Hello!', direction='rl').glow()\n")))),Object(c.b)(b.a,{func:function(e){return e.draw("Hello!",{direction:"rl"}).glow()},mdxType:"BDF"}),Object(c.b)("p",null,"Save all glyphs in ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/GNU_Unifont"}),"Unifont"),' as a black-and-white-two-color-only "font_preview.png" (with default width 512px):'),Object(c.b)(i.a,{groupId:"bdfparser-js-ts-py",defaultValue:"js",values:[{label:"JavaScript (CJS)",value:"js"},{label:"TypeScript (strict)",value:"ts"},{label:"Python",value:"py"}],mdxType:"Tabs"},Object(c.b)(o.a,{value:"js",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const font_preview = font.drawall()\nfont_preview.draw2canvas(canvas.getContext('2d'))\n"))),Object(c.b)(o.a,{value:"ts",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"const font_preview = font.drawall()\nfont_preview.draw2canvas(canvas.getContext('2d'))\n"))),Object(c.b)(o.a,{value:"py",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"font_preview = font.drawall()\nim_ac = Image.frombytes(\n  '1',\n  (font_preview.width(), font_preview.height()),\n  font_preview.tobytes('1'),\n)\nim_ac.save('font_preview.png', 'PNG')\n")))),Object(c.b)(s.a,{src:"bdfparser_py/font_preview_part.png",caption:"Parts of the Unifont preview image (click the image to view the long original)",position:"center",imgUrl:!0,link:Object(l.a)("img/bdfparser_py/font_preview.png"),mdxType:"Figure"}),Object(c.b)("p",null,"Now try it your self. Copy and paste this into the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"editor"}),"Live Demo & Code Editor"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"<BDF func={\n  (font) => {\n    return font.draw('Hello World!', {linelimit: 100, direction: 'tblr'})\n      .enlarge(3, 3).shadow(2, -2)\n  }\n}/>\n")),Object(c.b)("p",null,"Or even this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx"}),"<BDF size={1} func={(font) => font.drawall()}/>\n")),Object(c.b)("h2",{id:"copyright--links"},"Copyright & links"),Object(c.b)("p",null,"Written by ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://tomchen.org/"}),"Tom Chen"),", under ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/tomchen/bdfparser-js/blob/master/LICENSE"}),"the MIT License"),", a permissive open-source license."),Object(c.b)("p",null,"This TypeScript / JavaScript library supports Node.js, Deno and modern browsers. It has TypeScript source code, as well as compiled versions in CommonJS, ES module, minified UMD and seperate type definition files."),Object(c.b)("p",null,Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/tomchen/bdfparser-js"}),"GitHub repo")," | ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/bdfparser"}),"npm page")),Object(c.b)("p",null,"The documentation belongs to ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://font.tomchen.org/"}),"font.tomchen.org"),", a website where I put font & typography related stuff. ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/tomchen/font-website"}),"The documentation website's GitHub repo")))}m.isMDXComponent=!0}}]);