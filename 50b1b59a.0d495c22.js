(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{100:function(e,t,a){"use strict";a.d(t,"b",(function(){return i})),a.d(t,"a",(function(){return r}));var n=a(22),b=a(101);function i(){var e=Object(n.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,a=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,a,n){var i=void 0===n?{}:n,r=i.forcePrependBaseUrl,c=void 0!==r&&r,l=i.absolute,p=void 0!==l&&l;if(!a)return a;if(a.startsWith("#"))return a;if(Object(b.b)(a))return a;if(c)return t+a;var o=a.startsWith(t)?a:t+a.replace(/^\//,"");return p?e+o:o}(i,a,e,t)}}}function r(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},101:function(e,t,a){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function b(e){return void 0!==e&&!n(e)}a.d(t,"b",(function(){return n})),a.d(t,"a",(function(){return b}))},104:function(e,t,a){"use strict";a.d(t,"a",(function(){return r}));var n=a(0),b=a.n(n),i=a(100);function r(e){var t=e.src,a=e.caption,n=e.figure_number,r=e.width,c=e.baseUrl,l=e.link;return b.a.createElement("figure",{style:{textAlign:"center",margin:"1em"}},l?b.a.createElement("a",{href:l},b.a.createElement("img",{alt:a,src:c?Object(i.a)(t):t,width:r})):b.a.createElement("img",{alt:a,src:c?Object(i.a)(t):t,width:r}),b.a.createElement("figcaption",{style:{fontStyle:"italic"}},n&&b.a.createElement("strong",null,"Figure ",n," "),a))}},82:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return p})),a.d(t,"default",(function(){return m}));var n=a(3),b=a(8),i=(a(0),a(97)),r=a(104),c={id:"bitmap",title:"Bitmap object",sidebar_label:"Bitmap object"},l={unversionedId:"bitmap",id:"bitmap",isDocsHomePage:!1,title:"Bitmap object",description:"Overview",source:"@site/bdfparser_py/bitmap.mdx",slug:"/bitmap",permalink:"/bdfparser_py/bitmap",editUrl:"https://github.com/tomchen/font-website/edit/master/bdfparser_py/bitmap.mdx",version:"current",sidebar_label:"Bitmap object",sidebar:"sidebar",previous:{title:"Glyph object",permalink:"/bdfparser_py/glyph"}},p=[{value:"Overview",id:"overview",children:[]},{value:"<code>Bitmap()</code>",id:"bitmap",children:[]},{value:"<code>.bindata</code>",id:"bindata",children:[]},{value:"<code>.width()</code>",id:"width",children:[]},{value:"<code>.height()</code>",id:"height",children:[]},{value:"<code>.clone()</code>",id:"clone",children:[]},{value:"<code>.crop()</code>",id:"crop",children:[]},{value:"<code>.overlay()</code>",id:"overlay",children:[]},{value:"<code>Bitmap.concatall()</code>",id:"bitmapconcatall",children:[]},{value:"<code>+</code> concat",id:"-concat",children:[]},{value:"<code>.concat()</code>",id:"concat",children:[]},{value:"<code>.enlarge()</code>",id:"enlarge",children:[]},{value:"<code>*</code> enlarge",id:"-enlarge",children:[]},{value:"<code>.replace()</code>",id:"replace",children:[]},{value:"<code>.shadow()</code>",id:"shadow",children:[]},{value:"<code>.glow()</code>",id:"glow",children:[]},{value:"<code>.bytepad()</code>",id:"bytepad",children:[]},{value:"<code>.todata()</code>",id:"todata",children:[]},{value:"<code>.tobytes()</code>",id:"tobytes",children:[]},{value:"<code>str()</code> and <code>print()</code>",id:"str-and-print",children:[]},{value:"<code>repr()</code>",id:"repr",children:[]}],o={toc:p};function m(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"overview"},"Overview"),Object(i.b)("h2",{id:"bitmap"},Object(i.b)("inlineCode",{parentName:"h2"},"Bitmap()")),Object(i.b)("h4",{id:"syntax"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Bitmap(bin_bitmap_list)\n")),Object(i.b)("h4",{id:"examples"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright = Bitmap(['01110000',\n                            '01110000',\n                            '01110000',\n                            '01100000',\n                            '11100000',\n                            '11000000'])\nbitmap_quoteright2 = Bitmap(['01110',\n                             '02110',\n                             '01102',\n                             '10200',\n                             '01000'])\n# but usually you get the `Bitmap` object from a `Font` or its `Glyph`\nbitmap_j = Font('fonts/spec_example_fixed.bdf').glyph(\"j\").draw(mode=2)\n")),Object(i.b)("h4",{id:"parameters"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"bin_bitmap_list")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"list")," of ",Object(i.b)("em",{parentName:"td"},"strings")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"N/A")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Binary bitmap data, which is a ",Object(i.b)("em",{parentName:"td"},"list")," of ",Object(i.b)("inlineCode",{parentName:"td"},"'0'"),"/",Object(i.b)("inlineCode",{parentName:"td"},"'1'"),"/",Object(i.b)("inlineCode",{parentName:"td"},"'2'")," ",Object(i.b)("em",{parentName:"td"},"strings"))))),Object(i.b)("h4",{id:"return-value"},"Return value"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Bitmap")," object"),Object(i.b)("h4",{id:"description"},"Description"),Object(i.b)("p",null,"Initialize a ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object. Load binary bitmap data (",Object(i.b)("em",{parentName:"p"},"list")," of ",Object(i.b)("em",{parentName:"p"},"strings"),")."),Object(i.b)("h2",{id:"bindata"},Object(i.b)("inlineCode",{parentName:"h2"},".bindata")),Object(i.b)("h4",{id:"syntax-1"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".bindata\n")),Object(i.b)("h4",{id:"examples-1"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright2.bindata\n# ['01110',\n#  '02110',\n#  '01102',\n#  '10200',\n#  '01000']\n")),Object(i.b)("h4",{id:"type"},"Type"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"list")," of ",Object(i.b)("em",{parentName:"p"},"strings")),Object(i.b)("h4",{id:"description-1"},"Description"),Object(i.b)("p",null,"This attribute of a ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object represents the raw binary data of the bitmap."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"If you want to get the data, use API methods ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#todata"}),".todata()")," or ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#tobytes"}),".tobytes()")," instead."))),Object(i.b)("h2",{id:"width"},Object(i.b)("inlineCode",{parentName:"h2"},".width()")),Object(i.b)("h4",{id:"syntax-2"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".width()\n")),Object(i.b)("h4",{id:"examples-2"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright.width()  # 8\n")),Object(i.b)("h4",{id:"parameters-1"},"Parameters"),Object(i.b)("p",null,"No parameters"),Object(i.b)("h4",{id:"return-value-1"},"Return value"),Object(i.b)("p",null,"(",Object(i.b)("em",{parentName:"p"},"integer"),") Width of the bitmap"),Object(i.b)("h4",{id:"description-2"},"Description"),Object(i.b)("p",null,"Get the width of the bitmap."),Object(i.b)("h2",{id:"height"},Object(i.b)("inlineCode",{parentName:"h2"},".height()")),Object(i.b)("h4",{id:"syntax-3"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".height()\n")),Object(i.b)("h4",{id:"examples-3"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright.height()  # 6\n")),Object(i.b)("h4",{id:"parameters-2"},"Parameters"),Object(i.b)("p",null,"No parameters"),Object(i.b)("h4",{id:"return-value-2"},"Return value"),Object(i.b)("p",null,"(",Object(i.b)("em",{parentName:"p"},"integer"),") Height of the bitmap"),Object(i.b)("h4",{id:"description-3"},"Description"),Object(i.b)("p",null,"Get the height of the bitmap."),Object(i.b)("h2",{id:"clone"},Object(i.b)("inlineCode",{parentName:"h2"},".clone()")),Object(i.b)("h4",{id:"syntax-4"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".clone()\n")),Object(i.b)("h4",{id:"examples-4"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"cloned_bitmap_quoteright = bitmap_quoteright.clone()\ncloned_bitmap_quoteright == bitmap_quoteright  # False\ncloned_bitmap_quoteright.bindata == bitmap_quoteright.bindata  # True\n")),Object(i.b)("h4",{id:"parameters-3"},"Parameters"),Object(i.b)("p",null,"No parameters"),Object(i.b)("h4",{id:"return-value-3"},"Return value"),Object(i.b)("p",null,"(",Object(i.b)("em",{parentName:"p"},"Bitmap")," object) A deep copy of the original ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object"),Object(i.b)("h4",{id:"description-4"},"Description"),Object(i.b)("p",null,"Get a deep copy / clone of the ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object."),Object(i.b)("h2",{id:"crop"},Object(i.b)("inlineCode",{parentName:"h2"},".crop()")),Object(i.b)("h4",{id:"syntax-5"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".crop(w, h, xoff, yoff)\n")),Object(i.b)("h4",{id:"examples-5"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright.crop(7, 4, -1, 1)\n#         .###....\n#         .###....         ..###..\n# before: .###....  after: ..###..\n#         .##.....         ..##...\n#         ###.....         .###...\n#         ##......\n")),Object(i.b)("h4",{id:"parameters-4"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"w")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"N/A")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Width of the new bitmap")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"h")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"N/A")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Height of the new bitmap")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"xoff")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"0")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Relative position in x (right) direction of the new starting (bottom-left) point from the old one")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"yoff")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"0")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Relative position in y (top) direction of the new starting (bottom-left) point from the old one")))),Object(i.b)("h4",{id:"return-value-4"},"Return value"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object itself, which now has only the specified area as its ",Object(i.b)("inlineCode",{parentName:"p"},".bindata"),"."),Object(i.b)("h4",{id:"description-5"},"Description"),Object(i.b)("p",null,"Crop and/or extend the bitmap."),Object(i.b)("h2",{id:"overlay"},Object(i.b)("inlineCode",{parentName:"h2"},".overlay()")),Object(i.b)("h4",{id:"syntax-6"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".overlay(bitmap)\n")),Object(i.b)("h4",{id:"examples-6"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Bitmap(['010',\n        '201']).overlay(\nBitmap(['100',\n        '122'])).bindata\n# ['110',\n#  '122']\n")),Object(i.b)("h4",{id:"parameters-5"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"bitmap")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"Bitmap")," object"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"N/A")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"The incoming bitmap to overlay over the current one")))),Object(i.b)("h4",{id:"return-value-5"},"Return value"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object itself, which now has the combined bitmap as its ",Object(i.b)("inlineCode",{parentName:"p"},".bindata"),"."),Object(i.b)("h4",{id:"description-6"},"Description"),Object(i.b)("p",null,"Overlay another bitmap over the current one."),Object(i.b)("h2",{id:"bitmapconcatall"},Object(i.b)("inlineCode",{parentName:"h2"},"Bitmap.concatall()")),Object(i.b)("h4",{id:"syntax-7"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Bitmap.concatall(bitmaplist, direction, align, offsetlist)\n")),Object(i.b)("h4",{id:"examples-7"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Bitmap.concatall([bitmap_quoteright, bitmap_j, bitmap_quoteright2])\n")),Object(i.b)("details",null,Object(i.b)("summary",null,"Click to see the output of the above code"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"..............###............\n..............###............\n..............###............\n..............###............\n.............................\n.............###.............\n.............###.............\n.............###.............\n.............###.............\n............###..............\n............###..............\n............###..............\n............###..............\n............###..............\n...........###...............\n...........###...............\n.###.......###...............\n.###.......###...........###.\n.###......#.##...........&##.\n.##......####............##.&\n###.....####............#.&..\n##......###..............#...\n"))),Object(i.b)("hr",null),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Bitmap.concatall([bitmap_quoteright, bitmap_j, bitmap_quoteright2], offsetlist=[-3, 4])\n")),Object(i.b)("details",null,Object(i.b)("summary",null,"Click to see the output of the above code"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"...........###................\n...........###................\n...........###................\n...........###................\n..............................\n..........###.................\n..........###.................\n..........###.................\n..........###.................\n.........###..................\n.........###..................\n.........###..................\n.........###..................\n.........###..................\n........###...................\n........###...................\n.###....###...................\n.###....###...............###.\n.###...#.##...............&##.\n.##...####................##.&\n###..####................#.&..\n##...###..................#...\n"))),Object(i.b)("hr",null),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Bitmap.concatall([bitmap_quoteright, bitmap_j, bitmap_quoteright2], direction=0)\n")),Object(i.b)("details",null,Object(i.b)("summary",null,"Click to see the output of the above code"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),".###............\n.###............\n.###............\n.##.............\n###.............\n##..............\n......###.......\n......###.......\n......###.......\n......###.......\n................\n.....###........\n.....###........\n.....###........\n.....###........\n....###.........\n....###.........\n....###.........\n....###.........\n....###.........\n...###..........\n...###..........\n...###..........\n...###..........\n..#.##..........\n.####...........\n####............\n###.............\n.###............\n.&##............\n.##.&...........\n#.&.............\n.#..............\n"))),Object(i.b)("hr",null),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Bitmap.concatall([bitmap_quoteright, bitmap_j, bitmap_quoteright2], align=0)\n")),Object(i.b)("details",null,Object(i.b)("summary",null,"Click to see the output of the above code"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),".###..........###........###.\n.###..........###........&##.\n.###..........###........##.&\n.##...........###.......#.&..\n###......................#...\n##...........###.............\n.............###.............\n.............###.............\n.............###.............\n............###..............\n............###..............\n............###..............\n............###..............\n............###..............\n...........###...............\n...........###...............\n...........###...............\n...........###...............\n..........#.##...............\n.........####................\n........####.................\n........###..................\n"))),Object(i.b)("hr",null),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Bitmap.concatall([bitmap_quoteright, bitmap_j, bitmap_quoteright2], direction=0, align=0)\n")),Object(i.b)("details",null,Object(i.b)("summary",null,"Click to see the output of the above code"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),".........###....\n.........###....\n.........###....\n.........##.....\n........###.....\n........##......\n......###.......\n......###.......\n......###.......\n......###.......\n................\n.....###........\n.....###........\n.....###........\n.....###........\n....###.........\n....###.........\n....###.........\n....###.........\n....###.........\n...###..........\n...###..........\n...###..........\n...###..........\n..#.##..........\n.####...........\n####............\n###.............\n............###.\n............&##.\n............##.&\n...........#.&..\n............#...\n"))),Object(i.b)("h4",{id:"parameters-6"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"bitmaplist")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"list")," of ",Object(i.b)("em",{parentName:"td"},"Bitmap")," objects"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"N/A")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"list")," of bitmaps to concatenate")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"direction")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"1")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"1"),": right",Object(i.b)("br",null),Object(i.b)("inlineCode",{parentName:"td"},"0"),": down",Object(i.b)("br",null),Object(i.b)("inlineCode",{parentName:"td"},"2"),": left",Object(i.b)("br",null),Object(i.b)("inlineCode",{parentName:"td"},"-1"),": up")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"align")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"1")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"If horizontal (right (",Object(i.b)("inlineCode",{parentName:"td"},"1"),") or left (",Object(i.b)("inlineCode",{parentName:"td"},"2"),")) direction:",Object(i.b)("br",null),Object(i.b)("inlineCode",{parentName:"td"},"1"),": bottom",Object(i.b)("br",null),Object(i.b)("inlineCode",{parentName:"td"},"0"),": top",Object(i.b)("br",null),"If vertical (down (",Object(i.b)("inlineCode",{parentName:"td"},"0"),") or up (",Object(i.b)("inlineCode",{parentName:"td"},"-1"),")) direction:",Object(i.b)("br",null),Object(i.b)("inlineCode",{parentName:"td"},"1"),": left",Object(i.b)("br",null),Object(i.b)("inlineCode",{parentName:"td"},"0"),": right")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"offsetlist")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"list")," of ",Object(i.b)("em",{parentName:"td"},"integers")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"None")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"list")," of spacing offsets between every two glyphs: ",Object(i.b)("inlineCode",{parentName:"td"},"[offset_between_0_and_1, offset_between_1_and_2, ..., offset_between_2nd_last_and_last]"),". ",Object(i.b)("inlineCode",{parentName:"td"},"len(offsetlist)")," should be equal to ",Object(i.b)("inlineCode",{parentName:"td"},"len(bitmaplist)-1"),". If ",Object(i.b)("inlineCode",{parentName:"td"},"None"),", then all offsets are ",Object(i.b)("inlineCode",{parentName:"td"},"0"))))),Object(i.b)("h4",{id:"return-value-6"},"Return value"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Bitmap")," object"),Object(i.b)("h4",{id:"description-7"},"Description"),Object(i.b)("p",null,"Concatenate all ",Object(i.b)("em",{parentName:"p"},"Bitmap")," objects in a ",Object(i.b)("em",{parentName:"p"},"list"),"."),Object(i.b)("p",null,"This is a class method, meaning you need to call the method on the ",Object(i.b)("inlineCode",{parentName:"p"},"Bitmap")," class: ",Object(i.b)("inlineCode",{parentName:"p"},"Bitmap.concatall()")),Object(i.b)("h2",{id:"-concat"},Object(i.b)("inlineCode",{parentName:"h2"},"+")," concat"),Object(i.b)("h4",{id:"syntax-8"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap1 + bitmap2\n")),Object(i.b)("h4",{id:"examples-8"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"combined_bitmap = bitmap_quoteright + bitmap_j\n")),Object(i.b)("h4",{id:"description-8"},"Description"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"+")," is a shortcut of ",Object(i.b)("inlineCode",{parentName:"p"},"Bitmap.concatall()"),". Use ",Object(i.b)("inlineCode",{parentName:"p"},"+")," to concatenate two ",Object(i.b)("em",{parentName:"p"},"Bitmap")," objects and get a new ",Object(i.b)("em",{parentName:"p"},"Bitmap")," objects."),Object(i.b)("p",null,"It's equivalent to ",Object(i.b)("inlineCode",{parentName:"p"},"Bitmap.concatall([bitmap1, bitmap2])"),", using default values of all the optional parameters of ",Object(i.b)("inlineCode",{parentName:"p"},"Bitmap.concatall()"),". ",Object(i.b)("inlineCode",{parentName:"p"},"bitmap1")," won't change"),Object(i.b)("h2",{id:"concat"},Object(i.b)("inlineCode",{parentName:"h2"},".concat()")),Object(i.b)("h4",{id:"syntax-9"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".concat(bitmap, direction, align, offsetlist)\n")),Object(i.b)("h4",{id:"examples-9"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright.concat(bitmap_j)\n")),Object(i.b)("h4",{id:"parameters-7"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"bitmap")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"Bitmap")," object"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"N/A")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Bitmap to concatenate")))),Object(i.b)("p",null,"For the rest of the parameters (",Object(i.b)("inlineCode",{parentName:"p"},"direction"),", ",Object(i.b)("inlineCode",{parentName:"p"},"align")," and ",Object(i.b)("inlineCode",{parentName:"p"},"offsetlist"),"), see ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"#bitmapconcatall"}),Object(i.b)("inlineCode",{parentName:"a"},"Bitmap.concatall()")),'\'s "Parameters" section'),Object(i.b)("h4",{id:"return-value-7"},"Return value"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object itself, which now has the combined bitmap as its ",Object(i.b)("inlineCode",{parentName:"p"},".bindata"),"."),Object(i.b)("h4",{id:"description-9"},"Description"),Object(i.b)("p",null,"Concatenate another ",Object(i.b)("em",{parentName:"p"},"Bitmap")," objects to the current one."),Object(i.b)("p",null,"It is similar to ",Object(i.b)("inlineCode",{parentName:"p"},"bitmap1 + bitmap2")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Bitmap.concatall([bitmap1, bitmap2])"),", but update the current ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object and return it, instead of creating a new one like the other two methods."),Object(i.b)("h2",{id:"enlarge"},Object(i.b)("inlineCode",{parentName:"h2"},".enlarge()")),Object(i.b)("h4",{id:"syntax-10"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".enlarge(x, y)\n")),Object(i.b)("h4",{id:"examples-10"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright.enlarge(3, 1)\n#         .###....        ...#########............\n#         .###....        ...#########............\n# before: .###.... after: ...#########............\n#         .##.....        ...######...............\n#         ###.....        #########...............\n#         ##......        ######..................\n")),Object(i.b)("h4",{id:"parameters-8"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"x")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"1")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Multiplier in x (right) direction")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"y")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"1")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Multiplier in y (top) direction")))),Object(i.b)("h4",{id:"return-value-8"},"Return value"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object itself, which now has the enlarged bitmap as its ",Object(i.b)("inlineCode",{parentName:"p"},".bindata"),"."),Object(i.b)("h4",{id:"description-10"},"Description"),Object(i.b)("p",null,"Enlarge a ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object, by multiplying every pixel in x (right) direction and in y (top) direction."),Object(i.b)("h2",{id:"-enlarge"},Object(i.b)("inlineCode",{parentName:"h2"},"*")," enlarge"),Object(i.b)("h4",{id:"syntax-11"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_obj * integer\nbitmap_obj * tuple_of_two_integer\n")),Object(i.b)("h4",{id:"examples-11"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright * 3       # same as bitmap_quoteright.enlarge(3, 3)\nbitmap_quoteright * (3, 2)  # same as bitmap_quoteright.enlarge(3, 2)\n")),Object(i.b)("h4",{id:"description-11"},"Description"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"*")," is a shortcut of ",Object(i.b)("inlineCode",{parentName:"p"},".enlarge()"),"."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"bitmap_object * i")," is similar to ",Object(i.b)("inlineCode",{parentName:"p"},"bitmap_object.enlarge(i, i)"),", but returns a new ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object instead of updating the current one."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"bitmap_object * (x, y)")," is similar to ",Object(i.b)("inlineCode",{parentName:"p"},"bitmap_object.enlarge(x, y)"),", but returns a new ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object instead of updating the current one."),Object(i.b)("h2",{id:"replace"},Object(i.b)("inlineCode",{parentName:"h2"},".replace()")),Object(i.b)("h4",{id:"syntax-12"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".replace(substr, newsubstr)\n")),Object(i.b)("h4",{id:"examples-12"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Bitmap(['0121',\n        '2200']).replace(2, 1).bindata\n# ['0111',\n#  '1100']\n")),Object(i.b)("h4",{id:"parameters-9"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"substr")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"strings")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"N/A")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Substring to be replaced")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"newsubstr")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Required"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"strings")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"N/A")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"New substring as the replacement")))),Object(i.b)("h4",{id:"return-value-9"},"Return value"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object itself, which now has the altered bitmap as its ",Object(i.b)("inlineCode",{parentName:"p"},".bindata"),"."),Object(i.b)("h4",{id:"description-12"},"Description"),Object(i.b)("p",null,"Replace a string by another in the bitmap. Because the bitmap's data is stored as a ",Object(i.b)("em",{parentName:"p"},"list")," of ",Object(i.b)("inlineCode",{parentName:"p"},"'0'"),"/",Object(i.b)("inlineCode",{parentName:"p"},"'1'"),"/",Object(i.b)("inlineCode",{parentName:"p"},"'2'")," ",Object(i.b)("em",{parentName:"p"},"strings")," (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"['0211','1010','0200']"),"), you can replace a substring (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"'2'")," by ",Object(i.b)("inlineCode",{parentName:"p"},"'1'"),") in it."),Object(i.b)("h2",{id:"shadow"},Object(i.b)("inlineCode",{parentName:"h2"},".shadow()")),Object(i.b)("h4",{id:"syntax-13"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".shadow(xoff, yoff)\n")),Object(i.b)("h4",{id:"examples-13"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright.shadow(2, -1)\n#         .###....        .###......\n#         .###....        .###&&....\n#         .###....        .###&&....\n# before: .##..... after: .##&&&....\n#         ###.....        ###&&.....\n#         ##......        ##&&&.....\n#                         ..&&......\n")),Object(i.b)("h4",{id:"parameters-10"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"xoff")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"1")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Shadow's offset in x (right) direction")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"yoff")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"-1")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Shadow's offset in y (top) direction")))),Object(i.b)("h4",{id:"return-value-10"},"Return value"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object itself, which now has a bitmap of the original shape with its shadow as the ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object's ",Object(i.b)("inlineCode",{parentName:"p"},".bindata"),"."),Object(i.b)("h4",{id:"description-13"},"Description"),Object(i.b)("p",null,"Add shadow to the shape in the bitmap."),Object(i.b)("p",null,"The shadow will be filled by ",Object(i.b)("inlineCode",{parentName:"p"},"'2'"),"s."),Object(i.b)("p",null,"Default parameters (",Object(i.b)("inlineCode",{parentName:"p"},"xoff=1, yoff=-1"),") mean add a shadow which is 1 pixel right and 1 pixel bottom to the original shape."),Object(i.b)("h2",{id:"glow"},Object(i.b)("inlineCode",{parentName:"h2"},".glow()")),Object(i.b)("h4",{id:"syntax-14"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".glow()\n")),Object(i.b)("h4",{id:"examples-14"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright.glow()\n#                         ..&&&.....\n#         .###....        .&###&....\n#         .###....        .&###&....\n#         .###....        .&###&....\n# before: .##..... after: .&##&.....\n#         ###.....        &###&.....\n#         ##......        &##&......\n#                         .&&.......\n")),Object(i.b)("h4",{id:"parameters-11"},"Parameters"),Object(i.b)("p",null,"No parameters"),Object(i.b)("h4",{id:"return-value-11"},"Return value"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object itself, which now has a bitmap of the original shape with glow effect as the ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object's ",Object(i.b)("inlineCode",{parentName:"p"},".bindata"),"."),Object(i.b)("h4",{id:"description-14"},"Description"),Object(i.b)("p",null,"Add glow effect to the shape in the bitmap."),Object(i.b)("p",null,"The glowing area is one pixel up, right, bottom and left to the original pixels, and will be filled by ",Object(i.b)("inlineCode",{parentName:"p"},"'2'"),"s."),Object(i.b)("h2",{id:"bytepad"},Object(i.b)("inlineCode",{parentName:"h2"},".bytepad()")),Object(i.b)("h4",{id:"syntax-15"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".bytepad(bits)\n")),Object(i.b)("h4",{id:"examples-15"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap_quoteright2.bytepad().bindata\n#        ['01110',       ['01110000',\n#         '02110',        '02110000',\n# before: '01102', after: '01102000',\n#         '10200',        '10200000',\n#         '01000']        '01000000']\n")),Object(i.b)("h4",{id:"parameters-12"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"bits")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"integer")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"8")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Each line should be padded to multiple of how many bits/pixels")))),Object(i.b)("h4",{id:"return-value-12"},"Return value"),Object(i.b)("p",null,"The ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object itself, which now has the altered bitmap as its ",Object(i.b)("inlineCode",{parentName:"p"},".bindata"),"."),Object(i.b)("h4",{id:"description-15"},"Description"),Object(i.b)("p",null,"Pad each line (row) to multiple of 8 (or other numbers) bits/pixels, with ",Object(i.b)("inlineCode",{parentName:"p"},"'0'"),"s"),Object(i.b)("p",null,"Do this before using the bitmap for a glyph in a BDF font: per BDF spec, if the bit/pixel count in a line is not multiple of 8, the line needs to be padded on the right with 0s to the nearest byte (that is, multiple of 8)."),Object(i.b)("p",null,"Parameter ",Object(i.b)("inlineCode",{parentName:"p"},"bits")," is ",Object(i.b)("inlineCode",{parentName:"p"},"8")," by default because 1 byte = 8 bits, you can change it if you want to use other unconventional, off-spec values, such as 4 (half a byte)."),Object(i.b)("h2",{id:"todata"},Object(i.b)("inlineCode",{parentName:"h2"},".todata()")),Object(i.b)("h4",{id:"syntax-16"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".todata(datatype)\n")),Object(i.b)("h4",{id:"examples-16"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"bitmap1 = Bitmap(['00010', '11010', '00201'])\nbitmap2 = Bitmap(['00010', '11010'])\nbitmap1.todata(0)  # '00010\\n11010\\n00201'\nbitmap1.todata()   # ['00010', '11010', '00201']\nbitmap1.todata(2)  # [[0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 2, 0, 1]]\nbitmap1.todata(3)  # [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 2, 0, 1]\nbitmap2.todata(4)  # ['02', '1a']\nbitmap2.todata(5)  # [2, 26]\n")),Object(i.b)("h4",{id:"parameters-13"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"datatype")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"See below"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"1")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Output data type. See below")))),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"datatype"),": output data type:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"0"),": binary-encoded multi-line ",Object(i.b)("em",{parentName:"li"},"string"),". e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"'00010\\n11010\\n00201'")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"1"),": ",Object(i.b)("em",{parentName:"li"},"list")," of binary-encoded ",Object(i.b)("em",{parentName:"li"},"strings"),". e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"['00010','11010','00201']")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"2"),": ",Object(i.b)("em",{parentName:"li"},"list")," of ",Object(i.b)("em",{parentName:"li"},"lists")," of ",Object(i.b)("em",{parentName:"li"},"integers")," ",Object(i.b)("inlineCode",{parentName:"li"},"0")," or ",Object(i.b)("inlineCode",{parentName:"li"},"1")," (or ",Object(i.b)("inlineCode",{parentName:"li"},"2")," sometimes). e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"[[0,0,0,1,0],[1,1,0,1,0],[0,0,2,0,1]]")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"3"),": ",Object(i.b)("em",{parentName:"li"},"list")," of ",Object(i.b)("em",{parentName:"li"},"integers")," ",Object(i.b)("inlineCode",{parentName:"li"},"0")," or ",Object(i.b)("inlineCode",{parentName:"li"},"1")," (or ",Object(i.b)("inlineCode",{parentName:"li"},"2")," sometimes) (to be used with ",Object(i.b)("inlineCode",{parentName:"li"},".width()")," and ",Object(i.b)("inlineCode",{parentName:"li"},".height()"),"). e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"[0,0,0,1,0,1,1,0,1,0,0,0,2,0,1]")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"4"),": ",Object(i.b)("em",{parentName:"li"},"list")," of lowercase hexadecimal-encoded ",Object(i.b)("em",{parentName:"li"},"strings")," (without ",Object(i.b)("inlineCode",{parentName:"li"},"'0x'"),", padded with leading ",Object(i.b)("inlineCode",{parentName:"li"},"'0'"),"s according to width). e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"['02','1a']")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"5"),": ",Object(i.b)("em",{parentName:"li"},"list")," of ",Object(i.b)("em",{parentName:"li"},"integers"),". e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"[2,26]"))),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"You can't have ",Object(i.b)("inlineCode",{parentName:"p"},"'2'"),"s when using ",Object(i.b)("inlineCode",{parentName:"p"},"datatype")," ",Object(i.b)("inlineCode",{parentName:"p"},"4")," or ",Object(i.b)("inlineCode",{parentName:"p"},"5"),"."))),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"If you use ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://numpy.org/"}),"NumPy"),", set ",Object(i.b)("inlineCode",{parentName:"p"},"datatype")," to ",Object(i.b)("inlineCode",{parentName:"p"},"2"),'. Below is a simple example, see "',Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"./#quick-examples"}),"Quick examples"),'" for another example with NumPy and ',Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://matplotlib.org/"}),"Matplotlib"),"."))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import numpy\nnparr = numpy.array(bitmap1.todata(2))\n")),Object(i.b)("h4",{id:"return-value-13"},"Return value"),Object(i.b)("p",null,"Bitmap data in the specified type (",Object(i.b)("em",{parentName:"p"},"list")," or ",Object(i.b)("em",{parentName:"p"},"string"),") and format"),Object(i.b)("h4",{id:"description-16"},"Description"),Object(i.b)("p",null,"Get the bitmap's data in the specified type and format."),Object(i.b)("h2",{id:"tobytes"},Object(i.b)("inlineCode",{parentName:"h2"},".tobytes()")),Object(i.b)("h4",{id:"syntax-17"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),".tobytes(mode, bytesdict)\n")),Object(i.b)("h4",{id:"examples-17"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'from bdfparser import Font\nc = Font(\'fonts/unifont-13.0.04.bdf\').glyph("c").draw().crop(6, 8, 1, 2).shadow()\nprint(c)\n#          .####..\n#          #.&&&#.\n#          #&....&\n#          #&.....\n# now it\'s #&.....\n#          #&.....\n#          #&...#.\n#          .####.&\n#          ..&&&&.\nfrom PIL import Image\nim = Image.frombytes(\'1\', (c.width(), c.height()), c.tobytes(\'1\'))\nim.save("1.png", "PNG")\nim = Image.frombytes(\'L\', (c.width(), c.height()), c.tobytes(\'L\'))\nim.save("L.png", "PNG")\nim = Image.frombytes(\'RGB\', (c.width(), c.height()), c.tobytes())\nim.save("RGB.png", "PNG")\nim = Image.frombytes(\'RGBA\', (c.width(), c.height()), c.tobytes(\'RGBA\'))\nim.save("RGBA.png", "PNG")\n')),Object(i.b)(r.a,{src:"bdfparser_py/img/pil.png",caption:"Import the cropped glyph 'c' with shadow effect into PIL (Pillow) library and save as PNG files in different modes",width:500,position:"center",baseUrl:!0,mdxType:"Figure"}),Object(i.b)("h4",{id:"parameters-14"},"Parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Name"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("abbr",{title:"required"},"R"),"/",Object(i.b)("abbr",{title:"optional"},"O")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Default Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"mode")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"string")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"'RGB'")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"PIL image mode. See below")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"bytesdict")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Optional"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"dictionary")," (",Object(i.b)("em",{parentName:"td"},"integer")," as keys, ",Object(i.b)("em",{parentName:"td"},"bytes")," as values) or ",Object(i.b)("inlineCode",{parentName:"td"},"None")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Varies with ",Object(i.b)("inlineCode",{parentName:"td"},"mode"),". See below"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("em",{parentName:"td"},"dictionary")," mapping ",Object(i.b)("inlineCode",{parentName:"td"},"0"),"/",Object(i.b)("inlineCode",{parentName:"td"},"1"),"/",Object(i.b)("inlineCode",{parentName:"td"},"2")," in the bitmap data to bytes")))),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"mode"),": PIL image mode, it can be:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"'1'"),": 1-bit pixels, black and white (two colors only), stored with one pixel per byte"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"'L'"),": 8-bit pixels, ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Black_and_white"}),"black and white")," (",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/Grayscale"}),"grayscale"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"'RGB'"),": 3x8-bit pixels, ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/RGB_color_model"}),"RGB model"),", true color"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"'RGBA'"),": 4x8-bit pixels, ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/RGBA_color_model"}),"RGBA model"),", true color with transparency mask")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"bytesdict"),"'s default value varies with ",Object(i.b)("inlineCode",{parentName:"p"},"mode"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mode='1'"),": ",Object(i.b)("inlineCode",{parentName:"li"},"{ 0: 1, 1: 0, 2: 0 }"),", this one is special, the values are not bytes, although the final output is. Value ",Object(i.b)("inlineCode",{parentName:"li"},"1")," is white and ",Object(i.b)("inlineCode",{parentName:"li"},"0")," is black"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mode='L'"),": ",Object(i.b)("inlineCode",{parentName:"li"},"{ 0: b'\\xff', 1: b'\\x00', 2: b'\\x7f' }"),". Value ",Object(i.b)("inlineCode",{parentName:"li"},"b'\\xff'")," is white, ",Object(i.b)("inlineCode",{parentName:"li"},"b'\\x00'")," is black, ",Object(i.b)("inlineCode",{parentName:"li"},"b'\\x7f'")," is middle gray. You can select gray of other shades"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mode='RGB'"),": ",Object(i.b)("inlineCode",{parentName:"li"},"{ 0: b'\\xff\\xff\\xff', 1: b'\\x00\\x00\\x00', 2: b'\\xff\\x00\\x00' }"),". Value ",Object(i.b)("inlineCode",{parentName:"li"},"b'\\xff\\xff\\xff'")," is white, ",Object(i.b)("inlineCode",{parentName:"li"},"b'\\x00\\x00\\x00'")," is black, ",Object(i.b)("inlineCode",{parentName:"li"},"b'\\xff\\x00\\x00'")," is red. The 3 bytes represent red, green, blue channels in the ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/RGB_color_model"}),"RGB model")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mode='RGBA'"),": ",Object(i.b)("inlineCode",{parentName:"li"},"{ 0: b'\\xff\\xff\\xff\\x00', 1: b'\\x00\\x00\\x00\\xff', 2: b'\\xff\\x00\\x00\\xff' }"),". Same as ",Object(i.b)("inlineCode",{parentName:"li"},"'RGB'"),", supplemented with a fourth byte representing ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://en.wikipedia.org/wiki/RGBA_color_model"}),"alpha channel (opacity)"))),Object(i.b)("p",null,"(see also ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://pillow.readthedocs.io/en/stable/handbook/concepts.html#modes"}),'the "Modes" section in Pillow\'s docs'),", but only the above modes are supported here)"),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"If the bitmap is large (for example, it is what you got from ",Object(i.b)("em",{parentName:"p"},"Font")," object's ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"font#drawall"}),".drawall()"),", then it would be better to use ",Object(i.b)("inlineCode",{parentName:"p"},"'1'")," mode. Other modes, although have no issue with bdfparser's ",Object(i.b)("inlineCode",{parentName:"p"},".tobytes()")," method, they could be very slow when you load the data in ",Object(i.b)("em",{parentName:"p"},"bytes")," with Pillow library's ",Object(i.b)("inlineCode",{parentName:"p"},"Image.frombytes()"),". Because default ",Object(i.b)("inlineCode",{parentName:"p"},"mode")," is ",Object(i.b)("inlineCode",{parentName:"p"},"'RGB'"),", remember to specify ",Object(i.b)("inlineCode",{parentName:"p"},"'1'")," in this case."))),Object(i.b)("h4",{id:"return-value-14"},"Return value"),Object(i.b)("p",null,"(",Object(i.b)("em",{parentName:"p"},"bytes"),") Bitmap data as ",Object(i.b)("em",{parentName:"p"},"bytes")," of the specified format"),Object(i.b)("h4",{id:"description-17"},"Description"),Object(i.b)("p",null,"Sometimes you want to output bitmap data and load it with PIL / Pillow (",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Python_Imaging_Library"}),"Wikipedia"),"; ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://python-pillow.org/"}),"official site"),"; ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://pillow.readthedocs.io/en/stable/"}),"docs"),"; ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/python-pillow/Pillow"}),"GitHub"),"; ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://pypi.org/project/Pillow/"}),"PyPI"),"), a Python imaging library."),Object(i.b)("p",null,"This method helps you to get the bitmap's data as ",Object(i.b)("em",{parentName:"p"},"bytes")," to be used with Pillow's ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.frombytes"}),Object(i.b)("inlineCode",{parentName:"a"},"Image.frombytes(mode, size, data)")),"."),Object(i.b)("h2",{id:"str-and-print"},Object(i.b)("inlineCode",{parentName:"h2"},"str()")," and ",Object(i.b)("inlineCode",{parentName:"h2"},"print()")),Object(i.b)("h4",{id:"syntax-18"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"str(bitmap)\nprint(bitmap)\n")),Object(i.b)("h4",{id:"examples-18"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"c = Font('fonts/unifont-13.0.04.bdf').glyph(\"c\").draw().crop(6, 8, 1, 2).shadow()\nprint(c)  # same as print(str(c))\n#         .####..\n#         #.&&&#.\n#         #&....&\n#         #&.....\n# output: #&.....\n#         #&.....\n#         #&...#.\n#         .####.&\n#         ..&&&&.\n")),Object(i.b)("h4",{id:"description-18"},"Description"),Object(i.b)("p",null,"(",Object(i.b)("em",{parentName:"p"},"string"),") ",Object(i.b)("inlineCode",{parentName:"p"},"str()")," gets a human-readable (multi-line) ",Object(i.b)("em",{parentName:"p"},"string")," representation of the ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"print()")," prints a human-readable (multi-line) ",Object(i.b)("em",{parentName:"p"},"string")," representation of the ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object."),Object(i.b)("p",null,"The following digits in the bitmap's binary-encoded ",Object(i.b)("em",{parentName:"p"},"string")," ",Object(i.b)("em",{parentName:"p"},"list")," data are replaced in ",Object(i.b)("inlineCode",{parentName:"p"},"str()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"print()"),"'s output:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"'0'"),"s are replaced by ",Object(i.b)("inlineCode",{parentName:"li"},"#")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"'1'"),"s are replaced by ",Object(i.b)("inlineCode",{parentName:"li"},".")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"'2'"),"s are replaced by ",Object(i.b)("inlineCode",{parentName:"li"},"&"))),Object(i.b)("h2",{id:"repr"},Object(i.b)("inlineCode",{parentName:"h2"},"repr()")),Object(i.b)("h4",{id:"syntax-19"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"repr(bitmap)\n")),Object(i.b)("h4",{id:"examples-19"},"Examples"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"# use `c` again in the last example\nprint(repr(c))\n#        Bitmap(['0111100',\n#                '1022210',\n#                '1200002',\n#                '1200000',\n# output:        '1200000',\n#                '1200000',\n#                '1200010',\n#                '0111102',\n#                '0022220'])\n")),Object(i.b)("h4",{id:"description-19"},"Description"),Object(i.b)("p",null,"(",Object(i.b)("em",{parentName:"p"},"string"),") It gets a programmer-readable (multi-line) ",Object(i.b)("em",{parentName:"p"},"string")," representation of the ",Object(i.b)("em",{parentName:"p"},"Bitmap")," object."))}m.isMDXComponent=!0},97:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return d}));var n=a(0),b=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,b=function(e,t){if(null==e)return{};var a,n,b={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(b[a]=e[a])}return b}var p=b.a.createContext({}),o=function(e){var t=b.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},m=function(e){var t=o(e.components);return b.a.createElement(p.Provider,{value:t},e.children)},j={inlineCode:"code",wrapper:function(e){var t=e.children;return b.a.createElement(b.a.Fragment,{},t)}},O=b.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=o(a),O=n,d=m["".concat(r,".").concat(O)]||m[O]||j[O]||i;return a?b.a.createElement(d,c(c({ref:t},p),{},{components:a})):b.a.createElement(d,c({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=O;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,r[1]=c;for(var p=2;p<i;p++)r[p]=a[p];return b.a.createElement.apply(null,r)}return b.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"}}]);